{
  "version": 3,
  "sources": ["../../src/server/server.ts"],
  "sourcesContent": ["import crypto from 'crypto';\n\nimport express, { ErrorRequestHandler } from 'express';\nimport rateLimit from 'express-rate-limit';\nimport session from 'express-session';\nimport { body, query, validationResult } from 'express-validator';\nimport withExpressWs from 'express-ws';\nimport { Server as HttpServer } from 'http';\n\nimport Device from '../lib/types/device';\n\nimport SmartConnectUser from '../lib/types/smart-connect-user';\n\ndeclare module 'express-session' {\n    interface SessionData {\n        user?: SmartConnectUser;\n    }\n}\n\nclass Server {\n    private app = withExpressWs(express()).app;\n    private httpServer = null as HttpServer | null;\n\n    private users: SmartConnectUser[];\n    private sessionSecret;\n\n    constructor(\n        users: SmartConnectUser[],\n        sessionSecret: string,\n        handlers: {\n            getDevices: () => Promise<Device[]>;\n            getState: (id: string) => Promise<any>;\n            setState: (id: string, value: any) => Promise<void>;\n            subscribeState: (id: string, callback: (value: any) => void) => Promise<void>;\n            unsubscribeState: (id: string, callback: (value: any) => void) => Promise<void>;\n        },\n        allowdOrigins: {\n            private: string[];\n            public: string[];\n        },\n    ) {\n        this.users = users;\n        this.sessionSecret = sessionSecret;\n\n        this.app.use(((err, req, res, _next) => {\n            console.error(err);\n            res.status(500).send('Internal Server Error');\n        }) as ErrorRequestHandler);\n\n        this.app.use((req, res, next) => {\n            const origin = req.headers.origin;\n\n            if (!origin || req.method !== 'OPTIONS') {\n                return next();\n            }\n\n            const isPrivate = req.headers['Access-Control-Request-Private-Network'] === 'true';\n\n            res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');\n            res.setHeader('Access-Control-Allow-Credentials', 'true');\n\n            if (isPrivate) {\n                if (allowdOrigins.private.includes(origin)) {\n                    res.setHeader('Access-Control-Allow-Private-Network', 'true');\n                }\n            }\n\n            const allowedOrigins = [...allowdOrigins.private, ...allowdOrigins.public];\n            if (allowedOrigins.includes(origin)) {\n                res.setHeader('Access-Control-Allow-Origin', origin);\n            }\n\n            return next();\n        });\n\n        this.app.use(\n            session({\n                secret: this.sessionSecret,\n            }),\n        );\n        this.app.use(express.json());\n        this.app.use(\n            '/login',\n            rateLimit({\n                windowMs: 5 * 60 * 1000,\n                max: 5,\n            }),\n        );\n\n        this.app.get('/', (req, res) => {\n            res.json({\n                discover: 'smart-connect',\n                serviceID: 'iobroker.smart-connect',\n                serviceVersion: '1.0.0',\n                serviceName: 'Smart Connect ioBroker Backend',\n            });\n        });\n\n        this.app.post('/login', body('username').isString(), body('password').isString(), (req, res) => {\n            const { username, password } = req.body;\n\n            let validUser = null as SmartConnectUser | null;\n            for (const user of this.users) {\n                if (user.username.length !== username.length || user.password.length !== password.length) {\n                    continue;\n                }\n\n                const userNameMatches = crypto.timingSafeEqual(Buffer.from(user.username), Buffer.from(username));\n                const passwordMatches = crypto.timingSafeEqual(Buffer.from(user.password), Buffer.from(password));\n\n                if (userNameMatches && passwordMatches) {\n                    validUser = user;\n                }\n            }\n\n            if (validUser) {\n                req.session.user = validUser;\n                res.status(200).send('OK');\n            } else {\n                res.status(400).send('Invalid credentials');\n            }\n        });\n\n        this.app.post('/logout', (req, res) => {\n            req.session.destroy((err) => {\n                if (err) {\n                    res.status(500).send('Internal Server Error');\n                } else {\n                    res.status(200).send('OK');\n                }\n            });\n        });\n\n        this.app.use((req, res, next) => {\n            const nonSecureRoutes = ['/login', '/logout', '/'];\n\n            if (req.session.user || nonSecureRoutes.includes(req.path)) {\n                return next();\n            }\n            res.status(401).send('Unauthorized');\n        });\n\n        this.app.get('/devices', async (req, res) => {\n            if (Object.keys(req.query).length) {\n                res.status(400).send('Query parameters are not supported');\n                return;\n            }\n\n            res.status(200).json(await handlers.getDevices());\n        });\n\n        this.app.get<{\n            id: string;\n        }>(\n            '/state',\n            query('id')\n                .isString()\n                .exists()\n                .matches(/([a-z0-9]*\\.)*[a-z0-9]+$/),\n            async (req, res) => {\n                const errors = validationResult(req);\n                if (!errors.isEmpty()) {\n                    res.status(400).send('Bad request');\n                    return;\n                }\n\n                const { id } = req.query;\n\n                try {\n                    res.status(200).json({\n                        value: await handlers.getState(id as string),\n                    });\n                } catch (err: any) {\n                    res.status(400).send(err?.message || 'Bad request');\n                }\n            },\n        );\n\n        this.app.post<{\n            id: string;\n        }>(\n            '/state',\n            query('id')\n                .isString()\n                .exists()\n                .matches(/([a-z0-9]*\\.)*[a-z0-9]+$/),\n            body('value').exists(),\n            async (req, res) => {\n                const errors = validationResult(req);\n                if (!errors.isEmpty()) {\n                    res.status(400).send('Bad request');\n                    return;\n                }\n\n                const { id } = req.query;\n                const { value } = req.body;\n\n                try {\n                    await handlers.setState(id as string, value);\n                    res.status(200).send('OK');\n                } catch (err: any) {\n                    res.status(400).send(err?.message || 'Bad request');\n                }\n            },\n        );\n\n        this.app.ws('/', async (ws) => {\n            const subscriptions = new Map<string, (value: any) => void>();\n\n            ws.on('message', async (msg: string) => {\n                let data;\n                try {\n                    data = JSON.parse(msg);\n                } catch (err) {\n                    ws.send(\n                        JSON.stringify({\n                            error: 'Invalid JSON',\n                        }),\n                    );\n                    return;\n                }\n                const { type, id, uuid } = data;\n\n                if (!id) {\n                    ws.send(\n                        JSON.stringify({\n                            error: 'Missing id',\n                        }),\n                    );\n                    return;\n                }\n\n                if (!uuid) {\n                    ws.send(\n                        JSON.stringify({\n                            error: 'Missing uuid',\n                        }),\n                    );\n                }\n\n                if (type === 'subscribe') {\n                    try {\n                        const cb = (value: any) => {\n                            ws.send(\n                                JSON.stringify({\n                                    id,\n                                    value,\n                                    uuid,\n                                }),\n                            );\n                        };\n                        await handlers.subscribeState(id, cb);\n                        subscriptions.set(uuid, cb);\n                    } catch (e: any) {\n                        ws.send(\n                            JSON.stringify({\n                                error: e?.message || 'Internal Server Error',\n                                uuid,\n                            }),\n                        );\n                    }\n                } else if (type === 'unsubscribe') {\n                    const cb = subscriptions.get(uuid);\n\n                    if (!cb) {\n                        throw new Error('No subscription found');\n                    }\n\n                    await handlers.unsubscribeState(id, cb);\n                } else {\n                    ws.send(\n                        JSON.stringify({\n                            error: 'Invalid message',\n                            uuid,\n                        }),\n                    );\n                }\n            });\n        });\n    }\n\n    listen(port: number, ip: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            this.app.addListener('error', reject);\n\n            this.httpServer = this.app.listen(port, ip, () => {\n                resolve();\n\n                this.app.removeListener('error', reject);\n            });\n        });\n    }\n\n    close(): void {\n        this.httpServer?.close();\n    }\n}\n\nexport default Server;\n"],
  "mappings": "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",
  "names": ["withExpressWs", "express", "session", "rateLimit", "crypto"]
}
